# -*- coding: utf-8 -*-
import os
import json
import requests
import time # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—É–∑—ã
import io
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler
from google.oauth2 import service_account
from googleapiclient.discovery import build

CATEGORY_EMOJI_MAP = {
    "–ó–∞–¥–∞—á–∞": "‚úÖ",
    "–í—Å—Ç—Ä–µ—á–∞": "ü§ù",
    "–ò–¥–µ—è": "üí°",
    "–ü–æ–∫—É–ø–∫–∞": "üõí",
    "–ú—ã—Å–ª—å": "ü§î",
    "–°—Å—ã–ª–∫–∞": "üîó",
    "–¶–∏—Ç–∞—Ç–∞": "üí¨",
    "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞": "üìÑ" # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
}

# --- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏, ID –∏ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_DATABASE_ID = os.getenv('NOTION_DATABASE_ID')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
ALLOWED_TELEGRAM_ID = os.getenv('ALLOWED_TELEGRAM_ID') # –¢–≤–æ–π –ª–∏—á–Ω—ã–π ID
ASSEMBLYAI_API_KEY = os.getenv('ASSEMBLYAI_API_KEY') # –ù–æ–≤—ã–π –∫–ª—é—á

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (–±–µ–∑ Whisper) ---
def download_telegram_file(file_id: str) -> io.BytesIO:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile?file_id={file_id}"
    response = requests.get(url)
    file_path = response.json()['result']['file_path']
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
    file_response = requests.get(file_url)
    return io.BytesIO(file_response.content)

def transcribe_with_assemblyai(audio_file_bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤ AssemblyAI –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    headers = {'authorization': ASSEMBLYAI_API_KEY}

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä AssemblyAI
    upload_response = requests.post(
        'https://api.assemblyai.com/v2/upload',
        headers=headers,
        data=audio_file_bytes
    )
    audio_url = upload_response.json()['upload_url']
    print("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ AssemblyAI.")

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    transcript_request = {'audio_url': audio_url, 'language_code': 'ru'}
    transcript_response = requests.post(
        "https://api.assemblyai.com/v2/transcript",
        json=transcript_request,
        headers=headers
    )
    transcript_id = transcript_response.json()['id']
    print(f"–ó–∞–¥–∞—á–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {transcript_id}")

    # 3. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥)
    while True:
        polling_response = requests.get(
            f"https://api.assemblyai.com/v2/transcript/{transcript_id}",
            headers=headers
        )
        status = polling_response.json()['status']
        if status == 'completed':
            print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return polling_response.json()['text']
        elif status == 'error':
            print("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ AssemblyAI.")
            return None
        time.sleep(2) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        
def send_telegram_message(chat_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'  # –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤)
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def process_with_deepseek(text: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ DeepSeek –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –°–õ–û–í–ê–†–¨."""
    url = "https://api.deepseek.com/chat/completions"
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {DEEPSEEK_API_KEY}"}
    
    current_date_str = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–¥–µ–ª–∞–Ω–Ω—É—é {current_date_str}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
    1. –°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å–µ–π –∑–∞–º–µ—Ç–∫–∏.
    2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–¥–Ω—É –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: [–ò–¥–µ—è, –ó–∞–¥–∞—á–∞, –ü–æ–∫—É–ø–∫–∞, –í—Å—Ç—Ä–µ—á–∞, –ú—ã—Å–ª—å, –°—Å—ã–ª–∫–∞, –¶–∏—Ç–∞—Ç–∞].
    3. –ù–∞–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è.
    4. –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ü–æ–ª–µ "events" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º (–º–∞—Å—Å–∏–≤–æ–º) –æ–±—ä–µ–∫—Ç–æ–≤. –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º, –ø–æ–ª–µ "events" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º []. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Å–æ–±—ã—Ç–∏—è.

    –§–æ—Ä–º–∞—Ç JSON:
    {{
      "main_title": "–æ–±—â–∏–π_–∑–∞–≥–æ–ª–æ–≤–æ–∫_–∑–∞–º–µ—Ç–∫–∏",
      "category": "–æ–¥–Ω–∞_–æ–±—â–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
      "events": [
        {{
          "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–µ—Ä–≤–æ–≥–æ_—Å–æ–±—ã—Ç–∏—è",
          "datetime_iso": "YYYY-MM-DDTHH:MM:SS"
        }}
      ]
    }}

    –ó–∞–º–µ—Ç–∫–∞:
    ---
    {text}
    ---
    """
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "response_format": {"type": "json_object"}
    }
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    
    json_string_from_ai = response.json()['choices'][0]['message']['content']
    return json.loads(json_string_from_ai)

def create_notion_page(title: str, content: str, category: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion —Å –∏–∫–æ–Ω–∫–æ–π."""
    url = 'https://api.notion.com/v1/pages'
    headers = {
        'Authorization': f'Bearer {NOTION_TOKEN}',
        'Content-Type': 'application/json',
        'Notion-Version': '2022-06-28'
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–∞—è, —Å—Ç–∞–≤–∏–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    page_icon = CATEGORY_EMOJI_MAP.get(category, "üìÑ")

    properties = {
        'Name': {'title': [{'type': 'text', 'text': {'content': title}}]},
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': {'select': {'name': category}}
    }
    
    children = []
    if content:
        children.append({"object": "block", "type": "paragraph", "paragraph": {"rich_text": [{"type": "text", "text": {"content": content}}]}})
    
    payload = {
        'parent': {'database_id': NOTION_DATABASE_ID},
        'icon': {'type': 'emoji', 'emoji': page_icon}, # <--- –î–û–ë–ê–í–ò–õ–ò –ò–ö–û–ù–ö–£
        'properties': properties,
        'children': children
    }
    
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–∫–æ–Ω–∫–æ–π.")
    return response.json()['id'] # <--- –í–û–ó–í–†–ê–©–ê–ï–ú ID –°–¢–†–ê–ù–ò–¶–´

    
def create_google_calendar_event(title: str, description: str, start_time_iso: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º."""
    try:
        # ... (–∫–æ–¥ –¥–ª—è creds –∏ service –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
        creds_info = json.loads(GOOGLE_CREDENTIALS_JSON)
        creds = service_account.Credentials.from_service_account_info(creds_info)
        service = build('calendar', 'v3', credentials=creds)
        
        calendar_id_to_use = os.getenv('GOOGLE_CALENDAR_ID')
        start_time = datetime.fromisoformat(start_time_iso)
        end_time = start_time + timedelta(hours=1)

        event = {
            'summary': title,
            'description': description,
            'start': {'dateTime': start_time.isoformat(), 'timeZone': 'Europe/Kyiv'},
            'end': {'dateTime': end_time.isoformat(), 'timeZone': 'Europe/Kyiv'},
            # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ë–õ–û–ö –° –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú ---
            'reminders': {
                'useDefault': False, # –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                'overrides': [
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç
                    {'method': 'popup', 'minutes': 15},
                ],
            },
            # -----------------------------------------
        }

        created_event = service.events().insert(calendarId=calendar_id_to_use, body=event).execute()
        print("–°–æ–±—ã—Ç–∏–µ –≤ Google Calendar —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.")
        return created_event.get('id') # <--- –í–û–ó–í–†–ê–©–ê–ï–ú ID –°–û–ë–´–¢–ò–Ø
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {e}")
        return False

def delete_gcal_event(calendar_id: str, event_id: str):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è."""
    try:
        creds_info = json.loads(GOOGLE_CREDENTIALS_JSON)
        creds = service_account.Credentials.from_service_account_info(creds_info)
        service = build('calendar', 'v3', credentials=creds)
        
        service.events().delete(calendarId=calendar_id, eventId=event_id).execute()
        print(f"–°–æ–±—ã—Ç–∏–µ GCal {event_id} —É–¥–∞–ª–µ–Ω–æ.")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è GCal: {e}")
        return False

def get_and_delete_last_log():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    log_db_id = os.getenv('NOTION_LOG_DB_ID')
    if not log_db_id:
        return None

    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
    query_url = f"https://api.notion.com/v1/databases/{log_db_id}/query"
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}
    payload = {
        "sorts": [{"timestamp": "created_time", "direction": "descending"}],
        "page_size": 1
    }
    response = requests.post(query_url, headers=headers, json=payload)
    results = response.json().get('results', [])

    if not results:
        print("–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç.")
        return None

    # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏
    last_log_page = results[0]
    log_page_id = last_log_page['id']
    properties = last_log_page['properties']

    def get_text(prop):
        return prop['rich_text'][0]['text']['content'] if prop['rich_text'] else None

    action_details = {
        'notion_page_id': get_text(properties.get('NotionPageID')),
        'gcal_event_id': get_text(properties.get('GCalEventID')),
        'gcal_calendar_id': get_text(properties.get('GCalCalendarID'))
    }
    
    # 3. –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–µ –µ—â–µ —Ä–∞–∑
    delete_notion_page(log_page_id)
    
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {action_details}")
    return action_details

def log_last_action(notion_page_id: str = None, gcal_event_id: str = None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ª–æ–≥-–±–∞–∑—É Notion."""
    log_db_id = os.getenv('NOTION_LOG_DB_ID')
    url = 'https://api.notion.com/v1/pages'
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}

    properties = {
        'Name': {'title': [{'type': 'text', 'text': {'content': f"Action at {datetime.now()}"}}]}, # –ì–ª–∞–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        'NotionPageID': {'rich_text': [{'type': 'text', 'text': {'content': notion_page_id or ""}}]},
        'GCalEventID': {'rich_text': [{'type': 'text', 'text': {'content': gcal_event_id or ""}}]},
        'GCalCalendarID': {'rich_text': [{'type': 'text', 'text': {'content': os.getenv('GOOGLE_CALENDAR_ID') or ""}}]}
    }
    payload = {'parent': {'database_id': log_db_id}, 'properties': properties}
    requests.post(url, headers=headers, json=payload)
    print("–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ.")

def delete_notion_page(page_id):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç (—É–¥–∞–ª—è–µ—Ç) —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion."""
    url = f"https://api.notion.com/v1/pages/{page_id}"
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Notion-Version': '2022-06-28'}
    payload = {'archived': True}
    requests.patch(url, headers=headers, json=payload)
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ Notion {page_id} —É–¥–∞–ª–µ–Ω–∞.")

        
# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å "–§–µ–π—Å-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º" ---

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        chat_id = None
        try:
            content_length = int(self.headers['Content-Length'])
            body = self.rfile.read(content_length)
            update = json.loads(body.decode('utf-8'))

            if 'message' not in update:
                self.send_response(200); self.end_headers(); return

            message = update['message']
            user_id = str(message['from']['id'])
            chat_id = message['chat']['id']

            if user_id != ALLOWED_TELEGRAM_ID:
                self.send_response(200); self.end_headers(); return
            
            # –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /undo –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if message.get('text') == '/undo':
                # ... (–∑–¥–µ—Å—å –≤–∞—à —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –¥–ª—è /undo)
                self.send_response(200); self.end_headers(); return

            text_to_process = None

            if 'voice' in message:
                audio_bytes = download_telegram_file(message['voice']['file_id']).read()
                text_to_process = transcribe_with_assemblyai(audio_bytes)
                if not text_to_process:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            
            elif 'text' in message:
                text_to_process = message['text']

            if text_to_process:
                ai_data = process_with_deepseek(text_to_process)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ Notion (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                notion_title = ai_data.get('main_title', '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
                notion_category = ai_data.get('category', '–ú—ã—Å–ª—å')
                try:
                    notion_page_id = create_notion_page(notion_title, text_to_process, notion_category)
                    if notion_page_id: log_last_action(notion_page_id=notion_page_id)
                    feedback_text = (f"‚úÖ *–ó–∞–º–µ—Ç–∫–∞ –≤ Notion —Å–æ–∑–¥–∞–Ω–∞!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {notion_title}\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {notion_category}")
                    send_telegram_message(chat_id, feedback_text)
                except Exception as e:
                    send_telegram_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Notion:*\n`{e}`")

                # --- –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---
                calendar_events = ai_data.get('events', [])
                
                # 1. –§–ò–õ–¨–¢–†–£–ï–ú "–ü–£–°–¢–´–ï" –°–û–ë–´–¢–ò–Ø –û–¢ –ò–ò
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –¥–∞—Ç–∞
                valid_events = [
                    event for event in calendar_events 
                    if event and event.get('title') and event.get('datetime_iso')
                ]

                # 2. –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏
                if valid_events:
                    created_events_titles = []
                    for event in valid_events:
                        try:
                            gcal_event_id = create_google_calendar_event(event['title'], "", event['datetime_iso'])
                            if gcal_event_id:
                                log_last_action(gcal_event_id=gcal_event_id)
                            created_events_titles.append(event['title'])
                        except Exception as e:
                            send_telegram_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{event['title']}':*\n`{e}`")
                    
                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                    if created_events_titles:
                        feedback_text = (f"üìÖ *–î–æ–±–∞–≤–ª–µ–Ω–æ {len(created_events_titles)} —Å–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n- " + "\n- ".join(created_events_titles))
                        send_telegram_message(chat_id, feedback_text)

        except Exception as e:
            if chat_id:
                send_telegram_message(chat_id, f"ü§Ø *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Vercel.\n`{e}`")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        self.send_response(200)
        self.end_headers()
        return
