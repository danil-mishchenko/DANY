# -*- coding: utf-8 -*-
import os
import json
import requests
import time # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—É–∑—ã
import io
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler
from google.oauth2 import service_account
from googleapiclient.discovery import build

CATEGORY_EMOJI_MAP = {
    "–ó–∞–¥–∞—á–∞": "‚úÖ",
    "–í—Å—Ç—Ä–µ—á–∞": "ü§ù",
    "–ò–¥–µ—è": "üí°",
    "–ü–æ–∫—É–ø–∫–∞": "üõí",
    "–ú—ã—Å–ª—å": "ü§î",
    "–°—Å—ã–ª–∫–∞": "üîó",
    "–¶–∏—Ç–∞—Ç–∞": "üí¨",
    "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞": "üìÑ" # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
}

# --- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏, ID –∏ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_DATABASE_ID = os.getenv('NOTION_DATABASE_ID')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
ALLOWED_TELEGRAM_ID = os.getenv('ALLOWED_TELEGRAM_ID') # –¢–≤–æ–π –ª–∏—á–Ω—ã–π ID
ASSEMBLYAI_API_KEY = os.getenv('ASSEMBLYAI_API_KEY') # –ù–æ–≤—ã–π –∫–ª—é—á

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (–±–µ–∑ Whisper) ---
def download_telegram_file(file_id: str) -> io.BytesIO:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile?file_id={file_id}"
    response = requests.get(url)
    file_path = response.json()['result']['file_path']
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
    file_response = requests.get(file_url)
    return io.BytesIO(file_response.content)

def transcribe_with_assemblyai(audio_file_bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤ AssemblyAI –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    headers = {'authorization': ASSEMBLYAI_API_KEY}

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä AssemblyAI
    upload_response = requests.post(
        'https://api.assemblyai.com/v2/upload',
        headers=headers,
        data=audio_file_bytes
    )
    audio_url = upload_response.json()['upload_url']
    print("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ AssemblyAI.")

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    transcript_request = {'audio_url': audio_url, 'language_code': 'ru'}
    transcript_response = requests.post(
        "https://api.assemblyai.com/v2/transcript",
        json=transcript_request,
        headers=headers
    )
    transcript_id = transcript_response.json()['id']
    print(f"–ó–∞–¥–∞—á–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {transcript_id}")

    # 3. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥)
    while True:
        polling_response = requests.get(
            f"https://api.assemblyai.com/v2/transcript/{transcript_id}",
            headers=headers
        )
        status = polling_response.json()['status']
        if status == 'completed':
            print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return polling_response.json()['text']
        elif status == 'error':
            print("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ AssemblyAI.")
            return None
        time.sleep(2) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        
def send_telegram_message(chat_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'  # –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤)
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def process_with_deepseek(text: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ DeepSeek –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —É–ª—É—á—à–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    url = "https://api.deepseek.com/chat/completions"
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {DEEPSEEK_API_KEY}"}
    current_date_str = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–¥–µ–ª–∞–Ω–Ω—É—é {current_date_str}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
    1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: [–ò–¥–µ—è, –ó–∞–¥–∞—á–∞, –ü–æ–∫—É–ø–∫–∞, –í—Å—Ç—Ä–µ—á–∞, –ú—ã—Å–ª—å, –°—Å—ã–ª–∫–∞, –¶–∏—Ç–∞—Ç–∞].
    2. –°–ª–µ–≥–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: –∏—Å–ø—Ä–∞–≤—å –æ–ø–µ—á–∞—Ç–∫–∏, —É–ª—É—á—à–∏ —Å—Ç–∏–ª—å, —Å–¥–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º–∏.
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–º–µ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –¥–∞, –≤–µ—Ä–Ω–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ Europe/Kyiv. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π 12:00. –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤–µ—Ä–Ω–∏ null. –£—á–∏—Ç—ã–≤–∞–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã, –∫–∞–∫ "–∑–∞–≤—Ç—Ä–∞", "–≤ —Å—Ä–µ–¥—É".
    4. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

    –§–æ—Ä–º–∞—Ç JSON: {{ "category": "...", "beautified_title": "...", "beautified_content": "...", "event_datetime_iso": "..." }}

    –ó–∞–º–µ—Ç–∫–∞:
    ---
    {text}
    ---
    """
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "response_format": {"type": "json_object"}
    }
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    return response.json()['choices'][0]['message']['content']

def create_notion_page(title: str, content: str, category: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion —Å –∏–∫–æ–Ω–∫–æ–π."""
    url = 'https://api.notion.com/v1/pages'
    headers = {
        'Authorization': f'Bearer {NOTION_TOKEN}',
        'Content-Type': 'application/json',
        'Notion-Version': '2022-06-28'
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–∞—è, —Å—Ç–∞–≤–∏–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    page_icon = CATEGORY_EMOJI_MAP.get(category, "üìÑ")

    properties = {
        'Name': {'title': [{'type': 'text', 'text': {'content': title}}]},
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': {'select': {'name': category}}
    }
    
    children = []
    if content:
        children.append({"object": "block", "type": "paragraph", "paragraph": {"rich_text": [{"type": "text", "text": {"content": content}}]}})
    
    payload = {
        'parent': {'database_id': NOTION_DATABASE_ID},
        'icon': {'type': 'emoji', 'emoji': page_icon}, # <--- –î–û–ë–ê–í–ò–õ–ò –ò–ö–û–ù–ö–£
        'properties': properties,
        'children': children
    }
    
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–∫–æ–Ω–∫–æ–π.")
    
def create_google_calendar_event(title: str, description: str, start_time_iso: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º."""
    try:
        # ... (–∫–æ–¥ –¥–ª—è creds –∏ service –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
        creds_info = json.loads(GOOGLE_CREDENTIALS_JSON)
        creds = service_account.Credentials.from_service_account_info(creds_info)
        service = build('calendar', 'v3', credentials=creds)
        
        calendar_id_to_use = os.getenv('GOOGLE_CALENDAR_ID')
        start_time = datetime.fromisoformat(start_time_iso)
        end_time = start_time + timedelta(hours=1)

        event = {
            'summary': title,
            'description': description,
            'start': {'dateTime': start_time.isoformat(), 'timeZone': 'Europe/Kyiv'},
            'end': {'dateTime': end_time.isoformat(), 'timeZone': 'Europe/Kyiv'},
            # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ë–õ–û–ö –° –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú ---
            'reminders': {
                'useDefault': False, # –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                'overrides': [
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç
                    {'method': 'popup', 'minutes': 15},
                ],
            },
            # -----------------------------------------
        }

        service.events().insert(calendarId=calendar_id_to_use, body=event).execute()
        
        print("–°–æ–±—ã—Ç–∏–µ –≤ Google Calendar —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {e}")
        return False
        
# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å "–§–µ–π—Å-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º" ---

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        chat_id = None
        try:
            content_length = int(self.headers['Content-Length'])
            body = self.rfile.read(content_length)
            update = json.loads(body.decode('utf-8'))

            if 'message' not in update:
                self.send_response(200); self.end_headers(); return

            message = update['message']
            user_id = str(message['from']['id'])
            chat_id = message['chat']['id']

            if user_id != ALLOWED_TELEGRAM_ID:
                self.send_response(200); self.end_headers(); return

            text_to_process = None

            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'voice' in message:
                print("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
                audio_bytes = download_telegram_file(message['voice']['file_id']).read()
                text_to_process = transcribe_with_assemblyai(audio_bytes)
                if not text_to_process:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            
            # –®–∞–≥ 2: –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç
            elif 'text' in message:
                print("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                text_to_process = message['text']

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞–≥–∏—é
            if text_to_process:
                ai_result_str = process_with_deepseek(text_to_process)
                ai_data = json.loads(ai_result_str)
                
                title = ai_data.get('beautified_title', '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
                content = ai_data.get('beautified_content', '')
                category = ai_data.get('category', '–ú—ã—Å–ª—å')
                event_time_iso = ai_data.get('event_datetime_iso')

                # –û–¢–ß–ï–¢ –û –°–û–ó–î–ê–ù–ò–ò –ó–ê–ú–ï–¢–ö–ò –í NOTION
                try:
                    create_notion_page(title, content, category)
                    feedback_text = (f"‚úÖ *–ó–∞–º–µ—Ç–∫–∞ –≤ Notion —Å–æ–∑–¥–∞–Ω–∞!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}")
                    send_telegram_message(chat_id, feedback_text)
                except Exception as e:
                    error_text = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Notion:*\n`{e}`"
                    send_telegram_message(chat_id, error_text)
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")

                # –û–¢–ß–ï–¢ –û –°–û–ó–î–ê–ù–ò–ò –°–û–ë–´–¢–ò–Ø –í –ö–ê–õ–ï–ù–î–ê–†–ï
                if event_time_iso:
                    try:
                        create_google_calendar_event(title, content, event_time_iso)
                        dt_object = datetime.fromisoformat(event_time_iso)
                        months_map = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'}
                        formatted_date = f"{dt_object.day} {months_map[dt_object.month]} {dt_object.year} –≤ {dt_object.strftime('%H:%M')}"
                        feedback_text = (f"üìÖ *–°–æ–±—ã—Ç–∏–µ –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n*–ö–æ–≥–¥–∞:* {formatted_date}")
                        send_telegram_message(chat_id, feedback_text)
                    except Exception as e:
                        error_text = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ:*\n`{e}`"
                        send_telegram_message(chat_id, error_text)
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {e}")

        except Exception as e:
            if chat_id:
                send_telegram_message(chat_id, f"ü§Ø *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Vercel.\n`{e}`")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        self.send_response(200)
        self.end_headers()
        return
