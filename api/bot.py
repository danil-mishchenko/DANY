# -*- coding: utf-8 -*-
import os
import json
import requests
import time # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—É–∑—ã
import io
from datetime import datetime, timedelta, timezone
from http.server import BaseHTTPRequestHandler
from google.oauth2 import service_account
from googleapiclient.discovery import build
import re

def markdown_to_gcal_html(md_text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Markdown –≤ HTML –¥–ª—è Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è."""
    # –ó–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –Ω–∞ <b>–∂–∏—Ä–Ω—ã–π</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', md_text)
    # –ó–∞–º–µ–Ω—è–µ–º *–∫—É—Ä—Å–∏–≤* –Ω–∞ <i>–∫—É—Ä—Å–∏–≤</i>
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    return text
    
CATEGORY_EMOJI_MAP = {
    "–ó–∞–¥–∞—á–∞": "‚úÖ",
    "–í—Å—Ç—Ä–µ—á–∞": "ü§ù",
    "–ò–¥–µ—è": "üí°",
    "–ü–æ–∫—É–ø–∫–∞": "üõí",
    "–ú—ã—Å–ª—å": "ü§î",
    "–°—Å—ã–ª–∫–∞": "üîó",
    "–¶–∏—Ç–∞—Ç–∞": "üí¨",
    "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞": "üìÑ" # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
}

# --- –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏, ID –∏ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
NOTION_DATABASE_ID = os.getenv('NOTION_DATABASE_ID')
NOTION_LOG_DB_ID = os.getenv('NOTION_LOG_DB_ID')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
GOOGLE_CALENDAR_ID = os.getenv('GOOGLE_CALENDAR_ID') # <--- –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –ü–†–û–ü–ê–õ–ê
ALLOWED_TELEGRAM_ID = os.getenv('ALLOWED_TELEGRAM_ID')
ASSEMBLYAI_API_KEY = os.getenv('ASSEMBLYAI_API_KEY')

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (–±–µ–∑ Whisper) ---
def download_telegram_file(file_id: str) -> io.BytesIO:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile?file_id={file_id}"
    response = requests.get(url)
    file_path = response.json()['result']['file_path']
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
    file_response = requests.get(file_url)
    return io.BytesIO(file_response.content)

def transcribe_with_assemblyai(audio_file_bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤ AssemblyAI –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    headers = {'authorization': ASSEMBLYAI_API_KEY}

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä AssemblyAI
    upload_response = requests.post(
        'https://api.assemblyai.com/v2/upload',
        headers=headers,
        data=audio_file_bytes
    )
    audio_url = upload_response.json()['upload_url']
    print("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ AssemblyAI.")

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    transcript_request = {'audio_url': audio_url, 'language_code': 'ru'}
    transcript_response = requests.post(
        "https://api.assemblyai.com/v2/transcript",
        json=transcript_request,
        headers=headers
    )
    transcript_id = transcript_response.json()['id']
    print(f"–ó–∞–¥–∞—á–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {transcript_id}")

    # 3. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥)
    while True:
        polling_response = requests.get(
            f"https://api.assemblyai.com/v2/transcript/{transcript_id}",
            headers=headers
        )
        status = polling_response.json()['status']
        if status == 'completed':
            print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return polling_response.json()['text']
        elif status == 'error':
            print("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ AssemblyAI.")
            return None
        time.sleep(2) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

def send_telegram_message(chat_id: str, text: str, use_html: bool = False, add_undo_button: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML' if use_html else 'Markdown'
    }

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
    if add_undo_button:
        keyboard = {
            "inline_keyboard": [[
                {
                    "text": "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å",
                    "callback_data": "undo_last_action" # –ú–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ–º –ª–æ–≤–∏—Ç—å
                }
            ]]
        }
        payload['reply_markup'] = json.dumps(keyboard)

    try:
        requests.post(url, json=payload).raise_for_status()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def get_latest_notes(limit: int = 5):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É Notion –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    url = f"https://api.notion.com/v1/databases/{NOTION_DATABASE_ID}/query"
    payload = {
        "sorts": [{"timestamp": "created_time", "direction": "descending"}],
        "page_size": limit
    }
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    return response.json().get('results', [])

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–ò–°–ö–ê ---

def search_notion_pages(query: str):
    """–ò—â–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Ñ–∏–ª—å—Ç—Ä–∞."""
    url = f"https://api.notion.com/v1/databases/{NOTION_DATABASE_ID}/query"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–µ "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
    payload = {
        "filter": {
            "property": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            "rich_text": {
                "contains": query
            }
        },
        "page_size": 5 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 5 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    }
    
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    
    return response.json().get('results', [])
    
def get_notion_page_content(page_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion."""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Notion-Version': '2022-06-28'}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    blocks = response.json().get('results', [])
    
    content = []
    for block in blocks:
        block_type = block['type']
        if block_type in ['paragraph', 'bulleted_list_item', 'heading_1', 'heading_2', 'heading_3']:
            rich_text_array = block.get(block_type, {}).get('rich_text', [])
            for rich_text in rich_text_array:
                content.append(rich_text.get('plain_text', ''))
        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–ª–æ–∫–∞ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
        elif block_type == 'code':
            rich_text_array = block.get('code', {}).get('rich_text', [])
            for rich_text in rich_text_array:
                content.append(rich_text.get('plain_text', ''))

    return "\n".join(content)

def summarize_for_search(context: str, question: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å –≤ DeepSeek –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    url = "https://api.deepseek.com/chat/completions"
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {DEEPSEEK_API_KEY}"}
    prompt = f"""
    –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –°–¢–†–û–ì–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç–µ –∏–∑ –∑–∞–º–µ—Ç–∫–∏, –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.
    
    –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:
    ---
    {context}
    ---
    –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{question}"
    """
    data = {"model": "deepseek-chat", "messages": [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É."}, {"role": "user", "content": prompt}]}
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    return response.json()['choices'][0]['message']['content']

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –î–õ–Ø –í–°–¢–ê–í–ö–ò ---

def parse_to_notion_blocks(formatted_text: str) -> list:
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π –≤ –Ω–∞—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏ Notion (–ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, —Å–ø–∏—Å–∫–∏, –∂–∏—Ä–Ω—ã–π/–∫—É—Ä—Å–∏–≤)."""
    blocks = []
    for line in formatted_text.split('\n'):
        if not line.strip(): continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∞ (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ)
        block_type = "bulleted_list_item" if line.strip().startswith('- ') else "paragraph"
        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        clean_line = line.strip().lstrip('- ')
        
        # –°–æ–∑–¥–∞–µ–º rich_text –æ–±—ä–µ–∫—Ç—ã —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –∏ –∫—É—Ä—Å–∏–≤–∞
        rich_text_objects = []
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º re.split, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ ** –∏–ª–∏ *
        parts = re.split(r'(\*\*.*?\*\*|\*.*?\*)', clean_line)
        
        for part in parts:
            if not part: continue
            
            is_bold = part.startswith('**') and part.endswith('**')
            is_italic = part.startswith('*') and part.endswith('*')
            
            content = part
            annotations = {"bold": False, "italic": False}

            if is_bold:
                content = part.strip('**')
                annotations["bold"] = True
            elif is_italic:
                content = part.strip('*')
                annotations["italic"] = True

            rich_text_objects.append({
                "type": "text",
                "text": {"content": content},
                "annotations": annotations
            })

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫
        if block_type == "bulleted_list_item":
            blocks.append({"object": "block", "type": block_type, "bulleted_list_item": {"rich_text": rich_text_objects}})
        else:
            blocks.append({"object": "block", "type": block_type, "paragraph": {"rich_text": rich_text_objects}})
            
    return blocks
    
def process_with_deepseek(text: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ DeepSeek, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è."""
    url = "https://api.deepseek.com/chat/completions"
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {DEEPSEEK_API_KEY}"}
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ö–∏–µ–≤–∞ (UTC+3) ---
    kyiv_tz = timezone(timedelta(hours=3))
    current_datetime_in_kyiv = datetime.now(kyiv_tz)
    current_datetime_str = current_datetime_in_kyiv.strftime('%Y-%m-%d %H:%M:%S')
    # --------------------------------------------------------------------

    prompt = f"""
    –¢–≤–æ—è —Ä–æ–ª—å: —É–º–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–º–µ—Ç–æ–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤: {current_datetime_str} (–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤, EEST).
    –ó–∞–¥–∞—á–∏:
    1. –Ø–∑—ã–∫: –°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏.
    2. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°–æ–∑–¥–∞–π –µ–º–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞: [–ò–¥–µ—è, –ó–∞–¥–∞—á–∞, –ü–æ–∫—É–ø–∫–∞, –í—Å—Ç—Ä–µ—á–∞, –ú—ã—Å–ª—å, –°—Å—ã–ª–∫–∞, –¶–∏—Ç–∞—Ç–∞].
    3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –û—á–µ–Ω—å –ö—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç, –º–æ–∂–µ—à—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —è–≤–Ω–æ–µ –ø—É—Å—Ç–æ—Å–ª–æ–≤–∏–µ. –ó–∞–≥–æ–ª–æ–≤–∫–∏ - –∂–∏—Ä–Ω—ã–º, –º–æ–∂–Ω–æ —Å —ç–º–æ–¥–∑–∏. –°–ø–∏—Å–∫–∏ - —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å —Å —ç–º–æ–¥–∑–∏. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –º—ã—Å–ª–∏ - –∫—É—Ä—Å–∏–≤–æ–º. –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–º–∏.
    4. –°–æ–±—ã—Ç–∏—è: –ù–∞–π–¥–∏ –í–°–ï —Å–æ–±—ã—Ç–∏—è —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º. –£—á–∏—Ç—ã–≤–∞–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã ("–∑–∞–≤—Ç—Ä–∞", "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"). –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –∏—Ö –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DDTHH:MM:SS. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ "events": [].
    5. –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Deepseek (—Ç–∞–∫–∂–µ –¥–∏–ø—Å–∏–∫, –¥–∏–ø —Å–∏–∫ –∏ —Ç–¥.) —Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π —Ç–æ—Ç –æ—Ç—Ä–µ–∑–æ–∫ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ç–µ–±–µ, –∫–∞–∫ –ø–æ–ø—Ä–∞–≤–∫–∞ –∫ –ø—Ä–æ–º–ø—Ç—É.
    5. –†–µ–∑—É–ª—å—Ç–∞—Ç: –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON.
    –§–æ—Ä–º–∞—Ç JSON: {{"main_title": "...", "category": "...", "formatted_body": "...", "events": [{{"title": "...", "datetime_iso": "..."}}]}}
    –ó–∞–º–µ—Ç–∫–∞: --- {text} ---
    """
    data = {"model": "deepseek-chat", "messages": [{"role": "user", "content": prompt}], "response_format": {"type": "json_object"}}
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    return json.loads(response.json()['choices'][0]['message']['content'])

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö rich-text —Å—Ç—Ä–∞–Ω–∏—Ü
def create_notion_page(title: str, formatted_content: str, category: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion, –¥—É–±–ª–∏—Ä—É—è –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–æ '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ' –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    url = 'https://api.notion.com/v1/pages'
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}
    page_icon = CATEGORY_EMOJI_MAP.get(category, "üìÑ")
    
    # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤, —Ç.–∫. —ç—Ç–æ –ª–∏–º–∏—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ rich_text –ø–æ–ª—è –≤ Notion
    searchable_content = formatted_content[:2000]

    properties = {
        'Name': {'title': [{'type': 'text', 'text': {'content': title}}]},
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': {'select': {'name': category}},
        # –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ï –ü–û–õ–ï: –∫–æ–ø–∏—Ä—É–µ–º —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ': {'rich_text': [{'type': 'text', 'text': {'content': searchable_content}}]}
    }
    
    children = parse_to_notion_blocks(formatted_content)
    
    payload = {'parent': {'database_id': NOTION_DATABASE_ID}, 'icon': {'type': 'emoji', 'emoji': page_icon}, 'properties': properties, 'children': children}
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    return response.json()['id']

def create_google_calendar_event(title: str, description: str, start_time_iso: str):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –æ–ø–∏—Å–∞–Ω–∏–µ –≤ HTML."""
    creds_info = json.loads(GOOGLE_CREDENTIALS_JSON)
    creds = service_account.Credentials.from_service_account_info(creds_info)
    service = build('calendar', 'v3', credentials=creds)
    start_time = datetime.fromisoformat(start_time_iso)
    end_time = start_time + timedelta(hours=1)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ HTML –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    html_description = markdown_to_gcal_html(description)

    event = {
        'summary': title,
        'description': html_description, # <--- –ò–°–ü–û–õ–¨–ó–£–ï–ú HTML
        'start': {'dateTime': start_time.isoformat(), 'timeZone': 'Europe/Kyiv'},
        'end': {'dateTime': end_time.isoformat(), 'timeZone': 'Europe/Kyiv'},
        'reminders': {'useDefault': False, 'overrides': [{'method': 'popup', 'minutes': 15}]}
    }
    created_event = service.events().insert(calendarId=GOOGLE_CALENDAR_ID, body=event).execute()
    return created_event.get('id')

def delete_gcal_event(calendar_id: str, event_id: str):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è."""
    try:
        creds_info = json.loads(GOOGLE_CREDENTIALS_JSON)
        creds = service_account.Credentials.from_service_account_info(creds_info)
        service = build('calendar', 'v3', credentials=creds)
        
        service.events().delete(calendarId=calendar_id, eventId=event_id).execute()
        print(f"–°–æ–±—ã—Ç–∏–µ GCal {event_id} —É–¥–∞–ª–µ–Ω–æ.")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è GCal: {e}")
        return False

def get_and_delete_last_log():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å."""
    log_db_id = os.getenv('NOTION_LOG_DB_ID')
    if not log_db_id:
        return None

    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
    query_url = f"https://api.notion.com/v1/databases/{log_db_id}/query"
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}
    payload = {
        "sorts": [{"timestamp": "created_time", "direction": "descending"}],
        "page_size": 1
    }
    response = requests.post(query_url, headers=headers, json=payload)
    results = response.json().get('results', [])

    if not results:
        print("–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç.")
        return None

    # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏
    last_log_page = results[0]
    log_page_id = last_log_page['id']
    properties = last_log_page['properties']

    def get_text(prop):
        return prop['rich_text'][0]['text']['content'] if prop['rich_text'] else None

    action_details = {
        'notion_page_id': get_text(properties.get('NotionPageID')),
        'gcal_event_id': get_text(properties.get('GCalEventID')),
        'gcal_calendar_id': get_text(properties.get('GCalCalendarID'))
    }
    
    # 3. –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–µ –µ—â–µ —Ä–∞–∑
    delete_notion_page(log_page_id)
    
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {action_details}")
    return action_details

def log_last_action(notion_page_id: str = None, gcal_event_id: str = None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ª–æ–≥-–±–∞–∑—É Notion."""
    log_db_id = os.getenv('NOTION_LOG_DB_ID')
    url = 'https://api.notion.com/v1/pages'
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Content-Type': 'application/json', 'Notion-Version': '2022-06-28'}

    properties = {
        'Name': {'title': [{'type': 'text', 'text': {'content': f"Action at {datetime.now()}"}}]}, # –ì–ª–∞–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        'NotionPageID': {'rich_text': [{'type': 'text', 'text': {'content': notion_page_id or ""}}]},
        'GCalEventID': {'rich_text': [{'type': 'text', 'text': {'content': gcal_event_id or ""}}]},
        'GCalCalendarID': {'rich_text': [{'type': 'text', 'text': {'content': os.getenv('GOOGLE_CALENDAR_ID') or ""}}]}
    }
    payload = {'parent': {'database_id': log_db_id}, 'properties': properties}
    requests.post(url, headers=headers, json=payload)
    print("–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ.")

def delete_notion_page(page_id):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç (—É–¥–∞–ª—è–µ—Ç) —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion."""
    url = f"https://api.notion.com/v1/pages/{page_id}"
    headers = {'Authorization': f'Bearer {NOTION_TOKEN}', 'Notion-Version': '2022-06-28'}
    payload = {'archived': True}
    requests.patch(url, headers=headers, json=payload)
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ Notion {page_id} —É–¥–∞–ª–µ–Ω–∞.")

        
# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å "–§–µ–π—Å-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º" ---

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞, –ø–æ–∏—Å–∫, —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ---
class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        chat_id = None
        try:
            content_length = int(self.headers['Content-Length'])
            body = self.rfile.read(content_length)
            update = json.loads(body.decode('utf-8'))

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            message = update.get('message')
            callback_query = update.get('callback_query')

            # --- –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö ---
            if callback_query:
                callback_data = callback_query['data']
                chat_id = callback_query['message']['chat']['id']
                callback_query_id = callback_query['id']
                # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
                requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery?callback_query_id={callback_query_id}")

                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—â–µ–π –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
                if callback_data == 'undo_last_action':
                    last_action = get_and_delete_last_log()
                    if last_action:
                        if last_action.get('notion_page_id'): delete_notion_page(last_action['notion_page_id'])
                        if last_action.get('gcal_event_id') and last_action.get('gcal_calendar_id'): delete_gcal_event(last_action['gcal_calendar_id'], last_action['gcal_event_id'])
                        send_telegram_message(chat_id, "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                    else:
                        send_telegram_message(chat_id, "ü§î –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
                elif callback_data.startswith('delete_notion_'):
                    page_id_to_delete = callback_data.split('_', 2)[2]
                    try:
                        delete_notion_page(page_id_to_delete)
                        send_telegram_message(chat_id, f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
                    except Exception as e:
                        send_telegram_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –û—à–∏–±–∫–∞: {e}")

                self.send_response(200); self.end_headers(); return

            # --- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ---
            if not message:
                self.send_response(200); self.end_headers(); return

            user_id = str(message['from']['id'])
            chat_id = message['chat']['id']

            if user_id != ALLOWED_TELEGRAM_ID:
                self.send_response(200); self.end_headers(); return
            
            text = message.get('text', '')

            # --- –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î ---
            if text == '/notes':
                send_telegram_message(chat_id, "üîé –ò—â—É 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...")
                latest_notes = get_latest_notes(3)
                if not latest_notes:
                    send_telegram_message(chat_id, "üòî –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
                else:
                    send_telegram_message(chat_id, f"üëá –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:")
                    for note in latest_notes:
                        page_id = note['id']
                        title_parts = note.get('properties', {}).get('Name', {}).get('title', [])
                        page_title = title_parts[0]['plain_text'] if title_parts else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        
                        keyboard = {"inline_keyboard": [[{"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_notion_{page_id}"}]]}
                        
                        message_text = f"*{page_title}*"
                        payload = {'chat_id': chat_id, 'text': message_text, 'parse_mode': 'Markdown', 'reply_markup': json.dumps(keyboard)}
                        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", json=payload)
                self.send_response(200); self.end_headers(); return

            elif text.startswith('/search '):
                query = text.split(' ', 1)[1]
                if not query:
                    send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search.")
                    self.send_response(200); self.end_headers(); return
                
                send_telegram_message(chat_id, f"üîé –ò—â—É –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*...")
                search_results = search_notion_pages(query)
                
                if not search_results:
                    send_telegram_message(chat_id, "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                    self.send_response(200); self.end_headers(); return

                top_result_id = search_results[0]['id']
                page_content = get_notion_page_content(top_result_id)

                if not page_content:
                    send_telegram_message(chat_id, "ü§î –ù–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞–º–µ—Ç–∫—É, –Ω–æ –æ–Ω–∞ –ø—É—Å—Ç–∞.")
                    self.send_response(200); self.end_headers(); return

                answer = summarize_for_search(page_content, query)
                page_title = search_results[0].get('properties', {}).get('Name', {}).get('title', [{}])[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                final_response = f"üí° *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–º–µ—Ç–∫–µ ¬´{page_title}¬ª*:\n\n{answer}"
                send_telegram_message(chat_id, final_response)
                self.send_response(200); self.end_headers(); return
            
            elif text == '/undo':
                send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
                self.send_response(200); self.end_headers(); return
            
            # --- –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –ó–ê–ú–ï–¢–ö–ò (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞) ---
            text_to_process = None
            if 'voice' in message:
                audio_bytes = download_telegram_file(message['voice']['file_id']).read()
                text_to_process = transcribe_with_assemblyai(audio_bytes)
                if not text_to_process: send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            elif 'text' in message:
                text_to_process = message['text']

            if text_to_process:
                ai_data = process_with_deepseek(text_to_process)
                notion_title = ai_data.get('main_title', '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
                notion_category = ai_data.get('category', '–ú—ã—Å–ª—å')
                formatted_body = ai_data.get('formatted_body', text_to_process)
                
                try:
                    notion_page_id = create_notion_page(notion_title, formatted_body, notion_category)
                    if notion_page_id: log_last_action(notion_page_id=notion_page_id)
                    send_telegram_message(chat_id, f"‚úÖ *–ó–∞–º–µ—Ç–∫–∞ –≤ Notion —Å–æ–∑–¥–∞–Ω–∞!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {notion_title}\n*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {notion_category}", add_undo_button=True)
                except Exception as e:
                    detailed_error = e.response.text if hasattr(e, 'response') else str(e)
                    send_telegram_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Notion:*\n<pre>{detailed_error}</pre>", use_html=True)

                valid_events = [event for event in ai_data.get('events', []) if event and event.get('title') and event.get('datetime_iso')]
                if valid_events:
                    created_events_titles = []
                    for event in valid_events:
                        try:
                            gcal_event_id = create_google_calendar_event(event['title'], formatted_body, event['datetime_iso'])
                            if gcal_event_id: log_last_action(gcal_event_id=gcal_event_id)
                            created_events_titles.append(event['title'])
                        except Exception as e:
                            send_telegram_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{event['title']}':*\n`{e}`")
                    
                    if created_events_titles:
                        send_telegram_message(chat_id, f"üìÖ *–î–æ–±–∞–≤–ª–µ–Ω–æ {len(created_events_titles)} —Å–æ–±—ã—Ç–∏—è –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n- " + "\n- ".join(created_events_titles), add_undo_button=True)

        except Exception as e:
            if chat_id:
                send_telegram_message(chat_id, f"ü§Ø *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Vercel.\n`{e}`")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        self.send_response(200)
        self.end_headers()
        return
